import { Component, EventEmitter, Input, Output } from '@angular/core';
import { WidgetType } from '../../x-sights-core.service';
import Swal from 'sweetalert2';
import * as i0 from "@angular/core";
import * as i1 from "../../services/xsights-backend.service";
import * as i2 from "../../x-sights-core.service";
import * as i3 from "ngx-toastr";
import * as i4 from "@angular/common";
import * as i5 from "../../services/data.service";
import * as i6 from "ng-multiselect-dropdown";
import * as i7 from "devextreme-angular";
import * as i8 from "devextreme-angular/ui/nested";
import * as i9 from "@angular/forms";
export class XSightsBackendDashboardComponent {
    constructor(xsightsBackend, xsights, toastService, datePipe, dataService) {
        this.xsightsBackend = xsightsBackend;
        this.xsights = xsights;
        this.toastService = toastService;
        this.datePipe = datePipe;
        this.dataService = dataService;
        this.systemApis = ['198', '138', '279'];
        this.mtrSource = '138';
        this.dashboardId = 0;
        this.adminId = '0';
        this.showHeader = true;
        this.showFilters = true;
        this.startDate = null;
        this.endDate = null;
        this.toggleDashboard = false;
        this.isDashboardLoaded = new EventEmitter();
        this.showLoading = new EventEmitter();
        this.dashboardData = null;
        this.fromDate = null;
        this.toDate = null;
        this.showHeaderInputs = false;
        this.filters = [];
        this.selFilters = {};
        this.liveRefreshMin = 5;
        this.seriesData = {};
        this.pivotTables = {};
        this.dashPublicUrl = '';
        this.dropdownSettings = {};
        this.tableGraphs = [];
        this.calledSourceData = {};
        if (this.startDate == null) {
            this.fromDate = this.datePipe.transform(new Date(new Date().setDate(new Date().getDate() - 3)), 'yyyy-MM-dd');
        }
        else {
            this.fromDate = this.startDate;
        }
        if (this.endDate == null) {
            this.toDate = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
        }
        else {
            this.toDate = this.endDate;
        }
    }
    ngOnInit() {
        this.dropdownSettings = {
            singleSelection: false,
            enableCheckAll: false,
            allowSearchFilter: true,
        };
        // this.renderPage();
    }
    renderPage() {
        this.showLoading.emit(true);
        this.getGraphDashBoardById();
    }
    ngOnDestroy() {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        clearInterval(this.dashboardInterval);
    }
    ngOnChanges(changes) {
        //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
        //Add '${implements OnChanges}' to the class.
        if (changes['dashboardId']?.currentValue !=
            changes['dashboardId']?.previousValue ||
            changes['adminId']?.currentValue != changes['adminId']?.previousValue ||
            changes['showHeader']?.currentValue !=
                changes['showHeader']?.previousValue ||
            changes['showFilters']?.currentValue !=
                changes['showFilters']?.previousValue ||
            changes['toggleDashboard']?.currentValue !=
                changes['toggleDashboard']?.previousValue) {
            this.renderPage();
        }
    }
    getGraphDashBoardById() {
        let filter = {};
        this.filters.forEach((f) => {
            if (filter[f.sourceId]) {
                filter[f.sourceId] = {
                    ...filter[f.sourceId],
                    [f.fieldName]: f.selValues.map((value) => value.text)
                };
            }
            else {
                filter[f.sourceId] = {
                    [f.fieldName]: f.selValues.map((value) => value.text)
                };
            }
        });
        this.selFilters = filter;
        let data = {
            dashboardId: this.dashboardId,
            filters: filter,
            startDate: this.startDate == null ? null : this.datePipe.transform(new Date(this.startDate), "yyyy-MM-dd"),
            endDate: this.endDate == null ? null : this.datePipe.transform(new Date(this.endDate), "yyyy-MM-dd")
        };
        if (this.isDateDifferenceGreaterThan15Days(this.startDate, this.endDate)) {
            Swal.fire({
                title: "Error",
                text: "Date range greater than 30 days is not supported",
                icon: "error",
                showCloseButton: true
            });
            this.showLoading.emit(false);
            return;
        }
        this.dataService
            .getGraphDashBoardById(data, this.adminId)
            .then(async (res) => {
            this.showLoading.emit(false);
            this.filters = this.filters.length == 0 ? res.data[0]?.filters.map((filter) => {
                filter["values"] = JSON.parse(filter["values"]).map((value, index) => {
                    return {
                        id: index,
                        text: value
                    };
                });
                filter["selValues"] = filter["selValues"] ? filter["selValues"] : [];
                return filter;
            }) ?? [] : this.filters;
            this.seriesData = res.data[0]?.seriesData;
            res.data[0].graphs = res.data[0].graphs.sort(this.setGraphOrder);
            this.dashboardData = res.data[0];
            setTimeout(() => {
                for (const element of this.dashboardData.graphs) {
                    const graph = element;
                    if (this.systemApis.includes(graph.sourceid.toString())) {
                        this.showHeaderInputs = true;
                    }
                    if (graph.graphType != 2 && graph.graphType != 3) {
                        let res = this.seriesData[graph.graph_id];
                        let tempGraphData = {
                            rows: graph.graph_structure.xAxis,
                            columns: graph.graph_structure.yAxis,
                            aggregationFunctions: graph.graph_structure.aggreagations,
                            filter: graph.graph_structure.filter,
                            customVariable: graph.graph_structure.derivedVariables,
                            dataFormat: [],
                            colToShow: null,
                            lastLevelColumns: graph.graph_structure.lastLevelData ?? [],
                            chartType: graph.graph_structure.chartType,
                            dateVariable: graph.graph_structure.dateVariable,
                        };
                        this.buildChart(graph, res, tempGraphData, this.selFilters);
                    }
                    else if (graph.graphType == 3) {
                        this.tableGraphs.push(graph);
                    }
                }
                this.loadingComplete();
            }, 500);
        }).catch(err => {
            console.log(err);
        });
    }
    isDateDifferenceGreaterThan15Days(date1, date2) {
        // Create Date objects
        const startDate = new Date(date1);
        const endDate = new Date(date2);
        // Calculate the difference in milliseconds
        const differenceInMillis = Math.abs(startDate - endDate);
        // Calculate the difference in days
        const differenceInDays = differenceInMillis / (1000 * 60 * 60 * 24);
        // Check if the difference is greater than 15 days
        return differenceInDays > 30;
    }
    async renderTable() {
        if (this.tableGraphs.length > 0) {
            this.tableGraphs.forEach(async (graph) => {
                let data = await this.generateDashboard(graph, false);
                let tempGraphData = {
                    rows: graph.graph_structure.xAxis,
                    columns: graph.graph_structure.yAxis,
                    aggregationFunctions: graph.graph_structure.aggreagations,
                    filter: graph.graph_structure.filter,
                    customVariable: graph.graph_structure.derivedVariables,
                    dataFormat: [],
                    colToShow: null,
                    lastLevelColumns: graph.graph_structure.lastLevelData ?? [],
                    chartType: graph.graph_structure.chartType,
                    dateVariable: graph.graph_structure.dateVariable,
                };
                let dumpData = data;
                if (graph.sourceid.toString() == this.mtrSource) {
                    tempGraphData = this.dataService.keyConverter(tempGraphData, data[0].columns, 1);
                    dumpData = data[0].data;
                }
                this.buildChart(graph, dumpData, tempGraphData, null);
            });
        }
    }
    generateDashboard(graph, reCall = false) {
        return new Promise((resolve, reject) => {
            if (this.calledSourceData.hasOwnProperty(graph.sourceid.toString()) &&
                !reCall) {
                resolve(this.calledSourceData[graph.sourceid.toString()]);
            }
            else {
                let d = {
                    graphId: graph.graph_id,
                    dataFilter: this.selFilters,
                    direction: 0,
                    adminId: this.adminId,
                    shareid: null,
                    startTime: this.startDate ?? this.fromDate,
                    endTime: this.endDate ?? this.toDate
                };
                this.dataService.getGraphDataById(d).then((res) => {
                    Swal.hideLoading();
                    Swal.close();
                    let dumpData = res.data;
                    // this.uniqueSourceData.push(graph);
                    if (graph.dataType == 'remote-json' &&
                        !this.systemApis.includes(graph.sourceid.toString())) {
                        res.data = this.dataService.parseDataFormat(res.data, graph.dataFormat);
                    }
                    this.calledSourceData[graph.sourceid.toString()] = dumpData;
                    resolve(dumpData);
                })
                    .catch((err) => {
                    Swal.hideLoading();
                    Swal.close();
                    this.toastService.error('Unable to Fetch Data');
                });
            }
        });
    }
    buildChart(widgetData, data, tempData, dashboardFilter) {
        let _self = this;
        return new Promise(async (resolve, reject) => {
            let range = {};
            if (this.systemApis.includes(widgetData.sourceid.toString())) {
                range = {
                    startDate: this.startDate ?? this.fromDate,
                    endDate: this.endDate ?? this.toDate,
                };
            }
            if (widgetData.graphType == 1) {
                if (!this.systemApis.includes(widgetData.sourceid.toString())) {
                    range = {
                        startDate: this.datePipe.transform(widgetData.graph_structure.startDate, 'yyyy-MM-dd'),
                        endDate: this.datePipe.transform(widgetData.graph_structure.endDate, 'yyyy-MM-dd'),
                    };
                }
                let graphData = {
                    graphId: 'graph-' + widgetData.graph_id,
                    graphTitle: widgetData.graphname,
                    rows: tempData.rows[0],
                    columns: tempData.columns[0],
                    graphTypes: widgetData.graph_structure.chartType[0],
                    graphData: data,
                    aggregationFunctions: tempData.aggregationFunctions[0],
                    filter: tempData.filter,
                    colors: widgetData.graph_structure.colColours[0],
                    range: range,
                    dateVariable: tempData.dateVariable,
                    rangeFilter: widgetData.graph_structure.rangeFilter,
                    comparison: widgetData.graph_structure.comparison ?? [],
                    customVariable: tempData.customVariable,
                    dataFormat: tempData.dataFormat ?? [],
                    lastLevelColumns: tempData.lastLevelColumns ?? [],
                    selKeys: [],
                    adminId: this.adminId,
                    sourceId: widgetData.sourceId,
                    dashboardFilter: dashboardFilter
                };
                let response = await _self.xsightsBackend.build(WidgetType.TREND, graphData);
                resolve(response);
            }
            else if (widgetData.graphType == 3) {
                let tableData = {
                    rows: tempData.rows,
                    column: tempData.columns,
                    aggregationFunction: tempData.aggregationFunctions,
                    filter: tempData.filter,
                    derivedVariables: tempData.customVariable,
                    dataFormat: tempData.dataFormat ?? [],
                    data: data,
                    range: range,
                    categories: widgetData.graph_structure.chartType
                };
                _self.pivotTables['table-' + widgetData.graph_id] =
                    await _self.xsights.build(WidgetType.PIVOT_TABLE, tableData);
                resolve(true);
            }
            else {
                let graphdata = {
                    graphId: 'graph-' + widgetData.graph_id,
                    graphTitle: widgetData.graphname,
                    rows: tempData.rows,
                    adminId: this.adminId,
                    columns: tempData.columns,
                    aggregationFunctions: tempData.aggregationFunctions,
                    filter: tempData.filter,
                    customVariable: tempData.customVariable,
                    selKeys: [],
                    range: range,
                    sourceId: widgetData.sourceId,
                    dataFormat: tempData.dataFormat ?? [],
                    lastLevelColumns: tempData.lastLevelColumns ?? [],
                    graphTypes: widgetData.graph_structure.chartType,
                    graphData: data,
                    colors: widgetData.graph_structure.colColours,
                    dashboardFilter: dashboardFilter
                };
                setTimeout(() => {
                    let response = this.xsightsBackend.build(WidgetType.GRAPH, graphdata);
                }, 500);
                resolve(true);
            }
        });
    }
    loadingComplete() {
        this.renderTable();
        this.isDashboardLoaded.emit({
            isLoaded: true,
            hasSystemApi: this.showHeaderInputs
        });
    }
    setGraphOrder(a, b) {
        if (a.order < b.order) {
            return -1;
        }
        if (a.order > b.order) {
            return 1;
        }
        return 0;
    }
}
XSightsBackendDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: XSightsBackendDashboardComponent, deps: [{ token: i1.XsightsBackendService }, { token: i2.XSightsCoreService }, { token: i3.ToastrService }, { token: i4.DatePipe }, { token: i5.DataService }], target: i0.ɵɵFactoryTarget.Component });
XSightsBackendDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: XSightsBackendDashboardComponent, selector: "lib-x-sights-backend-dashboard", inputs: { dashboardId: "dashboardId", adminId: "adminId", showHeader: "showHeader", showFilters: "showFilters", startDate: "startDate", endDate: "endDate", toggleDashboard: "toggleDashboard" }, outputs: { isDashboardLoaded: "isDashboardLoaded", showLoading: "showLoading" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"row\" *ngIf=\"dashboardData != null\">\n    <div class=\"col-md-12\">\n        <div class=\"dash_graph_sec\">\n            <div class=\"dash_graph\">\n                <div style=\"display: flex; background-color:#000;\" *ngIf=\"showHeader\">\n                    <h3 class=\"graph_name\" style=\"height: 44px;flex:auto;text-transform:capitalize;\">\n                        {{dashboardData.dashboard_name}} &nbsp; <span class=\"badge badge-warning\"\n                            *ngIf=\"dashboardData.dashboard_type == 1\">LIVE</span> </h3>\n                    <div class=\"row date-container\" *ngIf=\"showHeaderInputs\">\n                        <div class=\"col-lg-6\"> <label for=\"startDate\">From &nbsp;&nbsp;</label> <input type=\"date\"\n                                [(ngModel)]=\"fromDate\" id=\"startDate\" class=\"form-control\"> </div>\n                        <div class=\"col-lg-6\"> <label for=\"endDate\">To &nbsp;&nbsp;</label> <input type=\"date\"\n                                [(ngModel)]=\"toDate\" id=\"endDate\" class=\"form-control\">\n                        </div>\n                        <button class=\"btn btn-primary\" (click)=\"renderPage()\">Search</button>\n                    </div>\n                </div>\n                <div class=\"filter-container\" *ngIf=\"filters.length\">\n                    <h3>Filters:</h3>\n                    <div class=\"col-lg-12 row\">\n                        <div class=\"col-lg-3\" *ngFor=\"let filter of filters;let i = index\"> \n                            <ng-multiselect-dropdown\n                                [placeholder]=\"'Select ' + filter.fieldName + '...'\" [(ngModel)]=\"filter.selValues\"\n                                [settings]=\"dropdownSettings\" [data]=\"filter.values\"> \n                            </ng-multiselect-dropdown> \n                        </div>\n                    </div>\n                    <div class=\"col-lg-12\">\n                        <button class=\"btn btn-primary\" (click)=\"getGraphDashBoardById()\">Apply Filter</button>\n                    </div>\n                </div>\n                <div class=\"row graph_design\" id=\"dashboardScreen\" #dashboardScreen> <ng-container\n                        *ngFor=\"let graph of dashboardData.graphs;\">\n                        \n                        <ng-container *ngIf=\"graph.graphType != 3 && graph.graphType != 2\">\n                            <div class=\"dashboard-graph\"\n                                [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                                style=\"min-height: 370px; padding: 0px;\"> <!-- loader start -->\n                                <h3 *ngIf=\"graph.graph_structure.xAxis[0] != '***LABEL***'\" style=\"text-align: center; background-color: #eee; padding: 2px;\">{{graph.graphname}}</h3>\n                                <div [id]=\"'graph-'+ graph.graph_id\" style=\"position: relative; padding: 10px; padding-top: 45px;\">\n                                    <div class=\"lds-ellipsis\">\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                    </div> <!-- loader end -->\n                                </div>\n                            </div>\n                        </ng-container>\n                        <div *ngIf=\"graph.graphType == 2\" class=\"dashboard-graph\" [id]=\"'table-graph-'+ graph.graph_id\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"display: flex; flex-direction: column; border-bottom: 0px; background-color:antiquewhite;\">\n                            <!-- loader start -->\n                            <h2 style=\"text-align: center; margin-bottom: 0px;\">{{graph.graphname}}</h2>\n                            <!-- loader end -->\n                        </div>\n                        <div *ngIf=\"graph.graphType == 3\" class=\"dashboard-graph\" [id]=\"'table-'+ graph.graph_id\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"min-height: 300px; display: flex; flex-direction: column; padding-bottom: 2%;\">\n                            <!-- loader start -->\n                            <h3 style=\"text-align: center;\">{{graph.graphname}}</h3> <ng-container\n                                *ngIf=\"pivotTables.hasOwnProperty('table-' + graph.graph_id)\"> <dx-pivot-grid\n                                    [allowSortingBySummary]=\"true\" [allowSorting]=\"true\" [allowFiltering]=\"true\"\n                                    [showBorders]=\"true\" [dataSource]=\"pivotTables['table-' + graph.graph_id]\">\n                                    <dxo-field-chooser [enabled]=\"false\"></dxo-field-chooser> </dx-pivot-grid>\n                            </ng-container> <ng-container *ngIf=\"pivotTables['table-' + graph.graph_id] == undefined\">\n                                <div class=\"lds-ellipsis\">\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                </div>\n                            </ng-container> <!-- loader end -->\n                        </div>\n                    </ng-container> </div>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".left-sidebar .nav-link{text-transform:capitalize}.left-sidebar i{margin-right:10px}.left-sidebar .nav-tabs .nav-item{text-transform:capitalize}::ng-deep .left-sidebar .nav-item{text-transform:capitalize}::ng-deep .modal{z-index:1060}.search-filter{height:23px}.search-group{display:flex;align-items:center;justify-content:space-between}.search-group .filter-icon{margin:0}.dash_graph_sec{overflow:auto}.dash_graph_sec .dash_graph{background-color:#fff;margin:15px}.dash_graph_sec .dash_graph .graph_name{text-align:center;align-self:flex-end;color:#fff;padding:5px;margin-bottom:0}.dash_graph_sec .dash_graph .graph_design{margin:0}.dashboard-graph{border:3px solid #dadada;align-items:center;justify-content:center}.modal{z-index:1060!important}::ng-deep .dropdown-custom{inset:103% 0 auto auto!important}.dashname{border-style:groove;background-color:#eee;width:64px;height:34px;display:flex;justify-content:center;align-items:center}.beans-list{padding-left:0;display:flex;flex-wrap:wrap}.beans{border-style:groove;background-color:#fd8309;color:#fff;border-radius:10px;padding:1%;border-color:#fd8309}.graph-source{display:flex;justify-content:space-between;align-items:center}.graph-source h3{margin-bottom:0}.filter-container{padding:10px;background:whitesmoke;border:2px solid #ccc}.filter-container h3{margin-bottom:auto}.filter-container .col-lg-3{padding-left:0}.date-container{justify-content:space-between;align-items:center;color:#fff}.date-container .col-lg-6{display:flex;align-items:center}.date-container .col-lg-6 label{width:70px}\n"], components: [{ type: i6.MultiSelectComponent, selector: "ng-multiselect-dropdown", inputs: ["disabled", "placeholder", "settings", "data"], outputs: ["onFilterChange", "onDropDownClose", "onSelect", "onDeSelect", "onSelectAll", "onDeSelectAll"] }, { type: i7.DxPivotGridComponent, selector: "dx-pivot-grid", inputs: ["allowExpandAll", "allowFiltering", "allowSorting", "allowSortingBySummary", "dataFieldArea", "dataSource", "disabled", "elementAttr", "encodeHtml", "export", "fieldChooser", "fieldPanel", "headerFilter", "height", "hideEmptySummaryCells", "hint", "loadPanel", "rowHeaderLayout", "rtlEnabled", "scrolling", "showBorders", "showColumnGrandTotals", "showColumnTotals", "showRowGrandTotals", "showRowTotals", "showTotalsPrior", "stateStoring", "tabIndex", "texts", "visible", "width", "wordWrapEnabled"], outputs: ["onCellClick", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDisposing", "onExporting", "onInitialized", "onOptionChanged", "allowExpandAllChange", "allowFilteringChange", "allowSortingChange", "allowSortingBySummaryChange", "dataFieldAreaChange", "dataSourceChange", "disabledChange", "elementAttrChange", "encodeHtmlChange", "exportChange", "fieldChooserChange", "fieldPanelChange", "headerFilterChange", "heightChange", "hideEmptySummaryCellsChange", "hintChange", "loadPanelChange", "rowHeaderLayoutChange", "rtlEnabledChange", "scrollingChange", "showBordersChange", "showColumnGrandTotalsChange", "showColumnTotalsChange", "showRowGrandTotalsChange", "showRowTotalsChange", "showTotalsPriorChange", "stateStoringChange", "tabIndexChange", "textsChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { type: i8.DxoFieldChooserComponent, selector: "dxo-field-chooser", inputs: ["allowSearch", "applyChangesMode", "enabled", "height", "layout", "searchTimeout", "texts", "title", "width"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: XSightsBackendDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-x-sights-backend-dashboard', template: "<div class=\"row\" *ngIf=\"dashboardData != null\">\n    <div class=\"col-md-12\">\n        <div class=\"dash_graph_sec\">\n            <div class=\"dash_graph\">\n                <div style=\"display: flex; background-color:#000;\" *ngIf=\"showHeader\">\n                    <h3 class=\"graph_name\" style=\"height: 44px;flex:auto;text-transform:capitalize;\">\n                        {{dashboardData.dashboard_name}} &nbsp; <span class=\"badge badge-warning\"\n                            *ngIf=\"dashboardData.dashboard_type == 1\">LIVE</span> </h3>\n                    <div class=\"row date-container\" *ngIf=\"showHeaderInputs\">\n                        <div class=\"col-lg-6\"> <label for=\"startDate\">From &nbsp;&nbsp;</label> <input type=\"date\"\n                                [(ngModel)]=\"fromDate\" id=\"startDate\" class=\"form-control\"> </div>\n                        <div class=\"col-lg-6\"> <label for=\"endDate\">To &nbsp;&nbsp;</label> <input type=\"date\"\n                                [(ngModel)]=\"toDate\" id=\"endDate\" class=\"form-control\">\n                        </div>\n                        <button class=\"btn btn-primary\" (click)=\"renderPage()\">Search</button>\n                    </div>\n                </div>\n                <div class=\"filter-container\" *ngIf=\"filters.length\">\n                    <h3>Filters:</h3>\n                    <div class=\"col-lg-12 row\">\n                        <div class=\"col-lg-3\" *ngFor=\"let filter of filters;let i = index\"> \n                            <ng-multiselect-dropdown\n                                [placeholder]=\"'Select ' + filter.fieldName + '...'\" [(ngModel)]=\"filter.selValues\"\n                                [settings]=\"dropdownSettings\" [data]=\"filter.values\"> \n                            </ng-multiselect-dropdown> \n                        </div>\n                    </div>\n                    <div class=\"col-lg-12\">\n                        <button class=\"btn btn-primary\" (click)=\"getGraphDashBoardById()\">Apply Filter</button>\n                    </div>\n                </div>\n                <div class=\"row graph_design\" id=\"dashboardScreen\" #dashboardScreen> <ng-container\n                        *ngFor=\"let graph of dashboardData.graphs;\">\n                        \n                        <ng-container *ngIf=\"graph.graphType != 3 && graph.graphType != 2\">\n                            <div class=\"dashboard-graph\"\n                                [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                                style=\"min-height: 370px; padding: 0px;\"> <!-- loader start -->\n                                <h3 *ngIf=\"graph.graph_structure.xAxis[0] != '***LABEL***'\" style=\"text-align: center; background-color: #eee; padding: 2px;\">{{graph.graphname}}</h3>\n                                <div [id]=\"'graph-'+ graph.graph_id\" style=\"position: relative; padding: 10px; padding-top: 45px;\">\n                                    <div class=\"lds-ellipsis\">\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                    </div> <!-- loader end -->\n                                </div>\n                            </div>\n                        </ng-container>\n                        <div *ngIf=\"graph.graphType == 2\" class=\"dashboard-graph\" [id]=\"'table-graph-'+ graph.graph_id\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"display: flex; flex-direction: column; border-bottom: 0px; background-color:antiquewhite;\">\n                            <!-- loader start -->\n                            <h2 style=\"text-align: center; margin-bottom: 0px;\">{{graph.graphname}}</h2>\n                            <!-- loader end -->\n                        </div>\n                        <div *ngIf=\"graph.graphType == 3\" class=\"dashboard-graph\" [id]=\"'table-'+ graph.graph_id\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"min-height: 300px; display: flex; flex-direction: column; padding-bottom: 2%;\">\n                            <!-- loader start -->\n                            <h3 style=\"text-align: center;\">{{graph.graphname}}</h3> <ng-container\n                                *ngIf=\"pivotTables.hasOwnProperty('table-' + graph.graph_id)\"> <dx-pivot-grid\n                                    [allowSortingBySummary]=\"true\" [allowSorting]=\"true\" [allowFiltering]=\"true\"\n                                    [showBorders]=\"true\" [dataSource]=\"pivotTables['table-' + graph.graph_id]\">\n                                    <dxo-field-chooser [enabled]=\"false\"></dxo-field-chooser> </dx-pivot-grid>\n                            </ng-container> <ng-container *ngIf=\"pivotTables['table-' + graph.graph_id] == undefined\">\n                                <div class=\"lds-ellipsis\">\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                </div>\n                            </ng-container> <!-- loader end -->\n                        </div>\n                    </ng-container> </div>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".left-sidebar .nav-link{text-transform:capitalize}.left-sidebar i{margin-right:10px}.left-sidebar .nav-tabs .nav-item{text-transform:capitalize}::ng-deep .left-sidebar .nav-item{text-transform:capitalize}::ng-deep .modal{z-index:1060}.search-filter{height:23px}.search-group{display:flex;align-items:center;justify-content:space-between}.search-group .filter-icon{margin:0}.dash_graph_sec{overflow:auto}.dash_graph_sec .dash_graph{background-color:#fff;margin:15px}.dash_graph_sec .dash_graph .graph_name{text-align:center;align-self:flex-end;color:#fff;padding:5px;margin-bottom:0}.dash_graph_sec .dash_graph .graph_design{margin:0}.dashboard-graph{border:3px solid #dadada;align-items:center;justify-content:center}.modal{z-index:1060!important}::ng-deep .dropdown-custom{inset:103% 0 auto auto!important}.dashname{border-style:groove;background-color:#eee;width:64px;height:34px;display:flex;justify-content:center;align-items:center}.beans-list{padding-left:0;display:flex;flex-wrap:wrap}.beans{border-style:groove;background-color:#fd8309;color:#fff;border-radius:10px;padding:1%;border-color:#fd8309}.graph-source{display:flex;justify-content:space-between;align-items:center}.graph-source h3{margin-bottom:0}.filter-container{padding:10px;background:whitesmoke;border:2px solid #ccc}.filter-container h3{margin-bottom:auto}.filter-container .col-lg-3{padding-left:0}.date-container{justify-content:space-between;align-items:center;color:#fff}.date-container .col-lg-6{display:flex;align-items:center}.date-container .col-lg-6 label{width:70px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.XsightsBackendService }, { type: i2.XSightsCoreService }, { type: i3.ToastrService }, { type: i4.DatePipe }, { type: i5.DataService }]; }, propDecorators: { dashboardId: [{
                type: Input
            }], adminId: [{
                type: Input
            }], showHeader: [{
                type: Input
            }], showFilters: [{
                type: Input
            }], startDate: [{
                type: Input
            }], endDate: [{
                type: Input
            }], toggleDashboard: [{
                type: Input
            }], isDashboardLoaded: [{
                type: Output
            }], showLoading: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,