import { Component, ViewEncapsulation } from '@angular/core';
import * as FileSave from 'file-saver';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "../../services/data.service";
import * as i3 from "primeng/table";
import * as i4 from "primeng/api";
import * as i5 from "@angular/common";
export class DataPopupComponent {
    constructor(activeModal, dataService) {
        this.activeModal = activeModal;
        this.dataService = dataService;
        this.keys = [];
        this.dataSource = [];
        this.columnToView = [];
    }
    ngOnInit() {
        let data = this.dataService.getModalData();
        this.columnToView = data.colToView;
        this.keys = Object.keys(data.refData[0]).filter((key) => this.columnToView.length == 0 || this.columnToView.includes(key));
        this.dataSource = data.refData;
    }
    closeModal() {
        this.activeModal.close();
    }
    exportExcel() {
        import('xlsx').then((xlsx) => {
            const worksheet = xlsx.utils.json_to_sheet(this.dataSource);
            const workbook = { Sheets: { data: worksheet }, SheetNames: ['data'] };
            const excelBuffer = xlsx.write(workbook, {
                bookType: 'xlsx',
                type: 'array',
            });
            this.saveAsExcelFile(excelBuffer, 'data');
        });
    }
    saveAsExcelFile(buffer, fileName) {
        let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
        let EXCEL_EXTENSION = '.xlsx';
        const data = new Blob([buffer], {
            type: EXCEL_TYPE,
        });
        FileSave.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
    }
}
DataPopupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: DataPopupComponent, deps: [{ token: i1.NgbActiveModal }, { token: i2.DataService }], target: i0.ɵɵFactoryTarget.Component });
DataPopupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: DataPopupComponent, selector: "lib-data-popup", ngImport: i0, template: "<div>\n  <div style=\"display: flex; justify-content:space-between;align-items: center;padding: 5px;\">\n    <h3 style=\"margin-bottom: 0; font-size: 20px;font-weight: 500;\">Data</h3> \n    <button class=\"btn btn-primary dwnld_btn\" (click)=\"exportExcel()\">Download</button>\n  </div>\n  <div class=\"smart_table\"> <p-table #dt1 [value]=\"dataSource\" [(selection)]=\"dataSource\" dataKey=\"id\"\n      styleClass=\"p-datatable-customers\" [rows]=\"10\" [paginator]=\"true\"> <ng-template pTemplate=\"header\">\n        <tr>\n          <th *ngFor=\"let heading of keys;\" pSortableColumn=\"{{heading}}\">{{heading}} <p-sortIcon\n              field=\"{{heading}}\"></p-sortIcon> </th>\n        </tr>\n        <tr>\n          <th *ngFor=\"let heading of keys;\"> <input pInputText type=\"text\"\n              (input)=\"dt1.filter($any($event.target)?.value, heading, 'contains')\"\n              [value]=\"$any(dt1.filters[heading])?.value\" placeholder=\"Search by {{heading}}\" class=\"p-column-filter\">\n          </th>\n        </tr>\n      </ng-template> <ng-template pTemplate=\"body\" let-data>\n        <tr>\n          <td *ngFor=\"let heading of keys\"> <span class=\"p-column-title\">{{heading}}</span> {{data[heading]}} </td>\n        </tr>\n      </ng-template> <ng-template pTemplate=\"emptymessage\">\n        <tr>\n          <td colspan=\"12\" class=\"text-center\">No Data found.</td>\n        </tr>\n      </ng-template> </p-table> </div>\n</div>", styles: [""], components: [{ type: i3.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollDelay", "virtualRowHeight", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "minBufferPx", "maxBufferPx", "responsiveLayout", "breakpoint", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll"], outputs: ["selectAllChange", "selectionChange", "contextMenuSelectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { type: i3.SortIcon, selector: "p-sortIcon", inputs: ["field"] }], directives: [{ type: i4.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.SortableColumn, selector: "[pSortableColumn]", inputs: ["pSortableColumn", "pSortableColumnDisabled"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: DataPopupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-data-popup', encapsulation: ViewEncapsulation.None, template: "<div>\n  <div style=\"display: flex; justify-content:space-between;align-items: center;padding: 5px;\">\n    <h3 style=\"margin-bottom: 0; font-size: 20px;font-weight: 500;\">Data</h3> \n    <button class=\"btn btn-primary dwnld_btn\" (click)=\"exportExcel()\">Download</button>\n  </div>\n  <div class=\"smart_table\"> <p-table #dt1 [value]=\"dataSource\" [(selection)]=\"dataSource\" dataKey=\"id\"\n      styleClass=\"p-datatable-customers\" [rows]=\"10\" [paginator]=\"true\"> <ng-template pTemplate=\"header\">\n        <tr>\n          <th *ngFor=\"let heading of keys;\" pSortableColumn=\"{{heading}}\">{{heading}} <p-sortIcon\n              field=\"{{heading}}\"></p-sortIcon> </th>\n        </tr>\n        <tr>\n          <th *ngFor=\"let heading of keys;\"> <input pInputText type=\"text\"\n              (input)=\"dt1.filter($any($event.target)?.value, heading, 'contains')\"\n              [value]=\"$any(dt1.filters[heading])?.value\" placeholder=\"Search by {{heading}}\" class=\"p-column-filter\">\n          </th>\n        </tr>\n      </ng-template> <ng-template pTemplate=\"body\" let-data>\n        <tr>\n          <td *ngFor=\"let heading of keys\"> <span class=\"p-column-title\">{{heading}}</span> {{data[heading]}} </td>\n        </tr>\n      </ng-template> <ng-template pTemplate=\"emptymessage\">\n        <tr>\n          <td colspan=\"12\" class=\"text-center\">No Data found.</td>\n        </tr>\n      </ng-template> </p-table> </div>\n</div>", styles: [""] }]
        }], ctorParameters: function () { return [{ type: i1.NgbActiveModal }, { type: i2.DataService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1wb3B1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy94LXNpZ2h0cy1jb3JlL3NyYy9saWIvY29tcG9uZW50cy9kYXRhLXBvcHVwL2RhdGEtcG9wdXAuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMveC1zaWdodHMtY29yZS9zcmMvbGliL2NvbXBvbmVudHMvZGF0YS1wb3B1cC9kYXRhLXBvcHVwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxLQUFLLFFBQVEsTUFBTSxZQUFZLENBQUM7Ozs7Ozs7QUFTdkMsTUFBTSxPQUFPLGtCQUFrQjtJQUk3QixZQUNVLFdBQTJCLEVBQzNCLFdBQXdCO1FBRHhCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUxsQyxTQUFJLEdBQVEsRUFBRSxDQUFDO1FBQ2YsZUFBVSxHQUFRLEVBQUUsQ0FBQztRQUNyQixpQkFBWSxHQUFVLEVBQUUsQ0FBQztJQUt6QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUM3QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUMxRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0QsV0FBVztRQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN2RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkMsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLElBQUksRUFBRSxPQUFPO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsZUFBZSxDQUFDLE1BQVcsRUFBRSxRQUFhO1FBQ3hDLElBQUksVUFBVSxHQUNaLGlGQUFpRixDQUFDO1FBQ3BGLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQztRQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzlCLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUMsQ0FBQztRQUNILFFBQVEsQ0FBQyxNQUFNLENBQ2IsSUFBSSxFQUNKLFFBQVEsR0FBRyxVQUFVLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxlQUFlLENBQy9ELENBQUM7SUFDSixDQUFDOzsrR0EzQ1Usa0JBQWtCO21HQUFsQixrQkFBa0Isc0RDWC9CLCs3Q0EwQk07MkZEZk8sa0JBQWtCO2tCQU45QixTQUFTOytCQUNFLGdCQUFnQixpQkFHWCxpQkFBaUIsQ0FBQyxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JBY3RpdmVNb2RhbCB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcbmltcG9ydCAqIGFzIEZpbGVTYXZlIGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRhLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItZGF0YS1wb3B1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRhLXBvcHVwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZGF0YS1wb3B1cC5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBEYXRhUG9wdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBrZXlzOiBhbnkgPSBbXTtcbiAgZGF0YVNvdXJjZTogYW55ID0gW107XG4gIGNvbHVtblRvVmlldzogYW55W10gPSBbXTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3RpdmVNb2RhbDogTmdiQWN0aXZlTW9kYWwsXG4gICAgcHJpdmF0ZSBkYXRhU2VydmljZTogRGF0YVNlcnZpY2VcbiAgKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBsZXQgZGF0YTogYW55ID0gdGhpcy5kYXRhU2VydmljZS5nZXRNb2RhbERhdGEoKTtcbiAgICB0aGlzLmNvbHVtblRvVmlldyA9IGRhdGEuY29sVG9WaWV3O1xuICAgIHRoaXMua2V5cyA9IE9iamVjdC5rZXlzKGRhdGEucmVmRGF0YVswXSkuZmlsdGVyKFxuICAgICAgKGtleSkgPT4gdGhpcy5jb2x1bW5Ub1ZpZXcubGVuZ3RoID09IDAgfHwgdGhpcy5jb2x1bW5Ub1ZpZXcuaW5jbHVkZXMoa2V5KVxuICAgICk7XG4gICAgdGhpcy5kYXRhU291cmNlID0gZGF0YS5yZWZEYXRhO1xuICB9XG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy5hY3RpdmVNb2RhbC5jbG9zZSgpO1xuICB9XG4gIGV4cG9ydEV4Y2VsKCkge1xuICAgIGltcG9ydCgneGxzeCcpLnRoZW4oKHhsc3gpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtzaGVldCA9IHhsc3gudXRpbHMuanNvbl90b19zaGVldCh0aGlzLmRhdGFTb3VyY2UpO1xuICAgICAgY29uc3Qgd29ya2Jvb2sgPSB7IFNoZWV0czogeyBkYXRhOiB3b3Jrc2hlZXQgfSwgU2hlZXROYW1lczogWydkYXRhJ10gfTtcbiAgICAgIGNvbnN0IGV4Y2VsQnVmZmVyID0geGxzeC53cml0ZSh3b3JrYm9vaywge1xuICAgICAgICBib29rVHlwZTogJ3hsc3gnLFxuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgfSk7XG4gICAgICB0aGlzLnNhdmVBc0V4Y2VsRmlsZShleGNlbEJ1ZmZlciwgJ2RhdGEnKTtcbiAgICB9KTtcbiAgfVxuICBzYXZlQXNFeGNlbEZpbGUoYnVmZmVyOiBhbnksIGZpbGVOYW1lOiBhbnkpIHtcbiAgICBsZXQgRVhDRUxfVFlQRSA9XG4gICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQ7Y2hhcnNldD1VVEYtOCc7XG4gICAgbGV0IEVYQ0VMX0VYVEVOU0lPTiA9ICcueGxzeCc7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBCbG9iKFtidWZmZXJdLCB7XG4gICAgICB0eXBlOiBFWENFTF9UWVBFLFxuICAgIH0pO1xuICAgIEZpbGVTYXZlLnNhdmVBcyhcbiAgICAgIGRhdGEsXG4gICAgICBmaWxlTmFtZSArICdfZXhwb3J0XycgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIEVYQ0VMX0VYVEVOU0lPTlxuICAgICk7XG4gIH1cbn1cbiIsIjxkaXY+XG4gIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczogY2VudGVyO3BhZGRpbmc6IDVweDtcIj5cbiAgICA8aDMgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwOyBmb250LXNpemU6IDIwcHg7Zm9udC13ZWlnaHQ6IDUwMDtcIj5EYXRhPC9oMz4gXG4gICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBkd25sZF9idG5cIiAoY2xpY2spPVwiZXhwb3J0RXhjZWwoKVwiPkRvd25sb2FkPC9idXR0b24+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwic21hcnRfdGFibGVcIj4gPHAtdGFibGUgI2R0MSBbdmFsdWVdPVwiZGF0YVNvdXJjZVwiIFsoc2VsZWN0aW9uKV09XCJkYXRhU291cmNlXCIgZGF0YUtleT1cImlkXCJcbiAgICAgIHN0eWxlQ2xhc3M9XCJwLWRhdGF0YWJsZS1jdXN0b21lcnNcIiBbcm93c109XCIxMFwiIFtwYWdpbmF0b3JdPVwidHJ1ZVwiPiA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggKm5nRm9yPVwibGV0IGhlYWRpbmcgb2Yga2V5cztcIiBwU29ydGFibGVDb2x1bW49XCJ7e2hlYWRpbmd9fVwiPnt7aGVhZGluZ319IDxwLXNvcnRJY29uXG4gICAgICAgICAgICAgIGZpZWxkPVwie3toZWFkaW5nfX1cIj48L3Atc29ydEljb24+IDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggKm5nRm9yPVwibGV0IGhlYWRpbmcgb2Yga2V5cztcIj4gPGlucHV0IHBJbnB1dFRleHQgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAoaW5wdXQpPVwiZHQxLmZpbHRlcigkYW55KCRldmVudC50YXJnZXQpPy52YWx1ZSwgaGVhZGluZywgJ2NvbnRhaW5zJylcIlxuICAgICAgICAgICAgICBbdmFsdWVdPVwiJGFueShkdDEuZmlsdGVyc1toZWFkaW5nXSk/LnZhbHVlXCIgcGxhY2Vob2xkZXI9XCJTZWFyY2ggYnkge3toZWFkaW5nfX1cIiBjbGFzcz1cInAtY29sdW1uLWZpbHRlclwiPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L25nLXRlbXBsYXRlPiA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiYm9keVwiIGxldC1kYXRhPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkICpuZ0Zvcj1cImxldCBoZWFkaW5nIG9mIGtleXNcIj4gPHNwYW4gY2xhc3M9XCJwLWNvbHVtbi10aXRsZVwiPnt7aGVhZGluZ319PC9zcGFuPiB7e2RhdGFbaGVhZGluZ119fSA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC9uZy10ZW1wbGF0ZT4gPG5nLXRlbXBsYXRlIHBUZW1wbGF0ZT1cImVtcHR5bWVzc2FnZVwiPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkIGNvbHNwYW49XCIxMlwiIGNsYXNzPVwidGV4dC1jZW50ZXJcIj5ObyBEYXRhIGZvdW5kLjwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L25nLXRlbXBsYXRlPiA8L3AtdGFibGU+IDwvZGl2PlxuPC9kaXY+Il19