import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { WidgetType } from '../../x-sights-core.service';
import Swal from 'sweetalert2';
import * as i0 from "@angular/core";
import * as i1 from "../../services/data.service";
import * as i2 from "ngx-toastr";
import * as i3 from "../../services/xsights-backend.service";
import * as i4 from "../../x-sights-core.service";
import * as i5 from "ng-multiselect-dropdown";
import * as i6 from "devextreme-angular";
import * as i7 from "devextreme-angular/ui/nested";
import * as i8 from "@angular/common";
import * as i9 from "@angular/forms";
export class XSightsBackendPublicDashboardComponent {
    constructor(dataService, toastService, xsightsBackend, xsights) {
        this.dataService = dataService;
        this.toastService = toastService;
        this.xsightsBackend = xsightsBackend;
        this.xsights = xsights;
        this.dashboardUrl = '';
        this.adminId = 0;
        this.dashboardLoaded = new EventEmitter();
        this.mtrSource = '138';
        this.decodedParams = {};
        this.dashboardData = {};
        this.filters = [];
        this.selFilters = {};
        this.dropdownSettings = {};
        this.tableDatas = {};
        this.seriesData = {};
        this.dumpData = [];
        this.calledSourceData = {};
        this.tableGraphs = [];
    }
    ngOnInit() {
        // this.decodeUrl();
        this.dropdownSettings = {
            singleSelection: false,
            enableCheckAll: false,
            allowSearchFilter: true,
        };
    }
    ngOnChanges(changes) {
        //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
        //Add '${implements OnChanges}' to the class.
        if (changes['dashboardUrl'].previousValue !=
            changes['dashboardUrl'].currentValue ||
            changes['adminId'].previousValue != changes['adminId'].currentValue) {
            this.decodeUrl();
        }
    }
    decodeUrl() {
        this.dataService.getDecodedUrl(this.dashboardUrl).then((res) => {
            const urlParamsStr = res.data[0].split('?')[1];
            const urlParamsArr = urlParamsStr.split('&');
            urlParamsArr.forEach((param) => {
                this.decodedParams[param.split('=')[0]] = param.split('=')[1];
            });
            this.getGraphDashBoardById();
        });
    }
    getGraphDashBoardById() {
        this.adminId = this.decodedParams.foAdminId;
        let filter = {};
        this.filters.forEach((f) => {
            if (filter[f.sourceId]) {
                filter[f.sourceId] = {
                    ...filter[f.sourceId],
                    [f.fieldName]: f.selValues.map((value) => value.text)
                };
            }
            else {
                filter[f.sourceId] = {
                    [f.fieldName]: f.selValues.map((value) => value.text)
                };
            }
        });
        this.selFilters = filter;
        let data = {
            dashboardId: this.decodedParams.dash_id,
            filters: filter,
            fileId: this.decodedParams.fileId
        };
        this.dataService
            .getSharedBackendDashboard(data, this.adminId)
            .then(async (res) => {
            this.dashboardData.id = res.data[0].share_id;
            this.filters = this.filters.length == 0 ? res.data[0]?.filters.map((filter) => {
                filter["values"] = JSON.parse(filter["values"]).map((value, index) => {
                    return {
                        id: index,
                        text: value
                    };
                });
                filter["selValues"] = filter["selValues"] ? filter["selValues"] : [];
                return filter;
            }) ?? [] : this.filters;
            this.seriesData = res.data[0]?.seriesData;
            res.data[0].graphs = res.data[0].graphs.sort(this.setGraphOrder);
            this.dashboardData = res.data[0];
            for (const element of this.dashboardData.graphs) {
                const graph = element;
                if (graph.graphType != 2 && graph.graphType != 3) {
                    let res = this.seriesData[graph.graph_id];
                    let tempGraphData = {
                        rows: graph.graph_structure.xAxis,
                        columns: graph.graph_structure.yAxis,
                        aggregationFunctions: graph.graph_structure.aggreagations,
                        filter: graph.graph_structure.filter,
                        customVariable: graph.graph_structure.derivedVariables,
                        dataFormat: [],
                        colToShow: null,
                        lastLevelColumns: graph.graph_structure.lastLevelData ?? [],
                        chartType: graph.graph_structure.chartType,
                        dateVariable: graph.graph_structure.dateVariable,
                    };
                    this.buildChart(graph, res, tempGraphData, this.selFilters);
                }
                else if (graph.graphType == 3) {
                    this.tableGraphs.push(graph);
                }
            }
            this.loadingComplete();
        });
    }
    buildChart(widgetData, data, tempData, dashboardFilter) {
        let _self = this;
        return new Promise(async (resolve, reject) => {
            if (widgetData.graphType == 1) {
                let graphData = {
                    graphId: 'graph-' + widgetData.graph_id,
                    graphTitle: widgetData.graphname,
                    rows: tempData.rows[0],
                    columns: tempData.columns[0],
                    graphTypes: widgetData.graph_structure.chartType[0],
                    graphData: data,
                    aggregationFunctions: tempData.aggregationFunctions[0],
                    filter: tempData.filter,
                    colors: widgetData.graph_structure.colColours[0],
                    range: {
                        startDate: widgetData.graph_structure.startDate,
                        endDate: widgetData.graph_structure.endDate,
                    },
                    dateVariable: tempData.dateVariable,
                    rangeFilter: widgetData.graph_structure.rangeFilter,
                    comparison: widgetData.graph_structure.comparison ?? [],
                    customVariable: tempData.customVariable,
                    dataFormat: tempData.dataFormat ?? [],
                    lastLevelColumns: tempData.lastLevelColumns ?? [],
                    selKeys: [],
                    adminId: this.adminId,
                    sourceId: widgetData.sourceId,
                    dashboardFilter: dashboardFilter,
                    shareid: this.dashboardData.id
                };
                let response = await _self.xsightsBackend.build(WidgetType.TREND, graphData);
                resolve(response);
            }
            else if (widgetData.graphType == 3) {
                let tableData = {
                    rows: tempData.rows,
                    column: tempData.columns,
                    aggregationFunction: tempData.aggregationFunctions,
                    filter: tempData.filter,
                    derivedVariables: tempData.customVariable,
                    dataFormat: tempData.dataFormat ?? [],
                    range: {
                        startDate: null,
                        endDate: null
                    },
                    data: data,
                    categories: widgetData.graph_structure.chartType,
                };
                _self.tableDatas['table-graph-' + widgetData.graph_id] =
                    await _self.xsights.build(WidgetType.PIVOT_TABLE, tableData);
                resolve(true);
            }
            else {
                let graphdata = {
                    graphId: 'graph-' + widgetData.graph_id,
                    graphTitle: widgetData.graphname,
                    rows: tempData.rows,
                    adminId: this.adminId,
                    columns: tempData.columns,
                    aggregationFunctions: tempData.aggregationFunctions,
                    filter: tempData.filter,
                    customVariable: tempData.customVariable,
                    selKeys: [],
                    sourceId: widgetData.sourceId,
                    range: {
                        startDate: null,
                        endDate: null
                    },
                    dataFormat: tempData.dataFormat ?? [],
                    lastLevelColumns: tempData.lastLevelColumns ?? [],
                    graphTypes: widgetData.graph_structure.chartType,
                    graphData: data,
                    colors: widgetData.graph_structure.colColours,
                    dashboardFilter: dashboardFilter,
                    shareid: this.dashboardData.id
                };
                setTimeout(() => {
                    let response = this.xsightsBackend.build(WidgetType.GRAPH, graphdata);
                }, 500);
                resolve(true);
            }
        });
    }
    loadingComplete() {
        this.renderTable();
        this.dashboardLoaded.emit({
            isLoaded: true
        });
    }
    async renderTable() {
        if (this.tableGraphs.length > 0) {
            this.tableGraphs.forEach(async (graph) => {
                let data = await this.generateDashboard(graph, false);
                console.log('data: ', data);
                let tempGraphData = {
                    rows: graph.graph_structure.xAxis,
                    columns: graph.graph_structure.yAxis,
                    aggregationFunctions: graph.graph_structure.aggreagations,
                    filter: graph.graph_structure.filter,
                    customVariable: graph.graph_structure.derivedVariables,
                    dataFormat: [],
                    colToShow: null,
                    lastLevelColumns: graph.graph_structure.lastLevelData ?? [],
                    chartType: graph.graph_structure.chartType,
                    dateVariable: graph.graph_structure.dateVariable,
                };
                if (graph.sourceid.toString() == this.mtrSource) {
                    tempGraphData = this.dataService.keyConverter(tempGraphData, data[0].columns, 1);
                }
                this.buildChart(graph, data[0].data, tempGraphData, null);
            });
        }
    }
    generateDashboard(graph, reCall = false) {
        return new Promise((resolve, reject) => {
            if (this.calledSourceData.hasOwnProperty(graph.sourceid.toString()) &&
                !reCall) {
                resolve(this.calledSourceData[graph.sourceid.toString()]);
            }
            else {
                let d = {
                    graphId: graph.graph_id,
                    dataFilter: this.selFilters,
                    direction: 0,
                    adminId: this.adminId,
                    shareid: this.dashboardData.id,
                    startDate: null,
                    endDate: null
                };
                this.dataService.getGraphDataById(d).then((res) => {
                    Swal.hideLoading();
                    Swal.close();
                    let keys = null;
                    let dumpData = res.data;
                    this.calledSourceData[graph.sourceid.toString()] = dumpData;
                    resolve(dumpData);
                })
                    .catch((err) => {
                    Swal.hideLoading();
                    Swal.close();
                    this.toastService.error('Unable to Fetch Data');
                });
            }
        });
    }
    setGraphOrder(a, b) {
        if (a.order < b.order) {
            return -1;
        }
        if (a.order > b.order) {
            return 1;
        }
        return 0;
    }
}
XSightsBackendPublicDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: XSightsBackendPublicDashboardComponent, deps: [{ token: i1.DataService }, { token: i2.ToastrService }, { token: i3.XsightsBackendService }, { token: i4.XSightsCoreService }], target: i0.ɵɵFactoryTarget.Component });
XSightsBackendPublicDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: XSightsBackendPublicDashboardComponent, selector: "lib-x-sights-backend-public-dashboard", inputs: { dashboardUrl: "dashboardUrl", adminId: "adminId" }, outputs: { dashboardLoaded: "dashboardLoaded" }, usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"dashboardData != {}\">\n    <div class=\"dash_graph_sec\">\n        <div class=\"dash_graph dashboard-wrapper\">\n            <div>\n                <h3 class=\"graph_name\" style=\"height: 44px;\">{{dashboardData.dashboard_name}} </h3>\n            </div>\n            <div class=\"filter-container\" *ngIf=\"filters.length\">\n                <h3>Filters:</h3>\n                <div class=\"col-lg-12 row\">\n                    <div class=\"col-lg-3\" *ngFor=\"let filter of filters;let i = index\"> \n                        <ng-multiselect-dropdown\n                            [placeholder]=\"'Select ' + filter.fieldName + '...'\" [(ngModel)]=\"filter.selValues\"\n                            [settings]=\"dropdownSettings\" [data]=\"filter.values\"> \n                        </ng-multiselect-dropdown> \n                    </div>\n                </div>\n                <div class=\"col-lg-12\">\n                    <button class=\"btn btn-primary\" (click)=\"getGraphDashBoardById()\">Apply Filter</button>\n                </div>\n            </div>\n            <div class=\"row graph_design\" id=\"dashboardScreen\"> \n                <ng-container *ngFor=\"let graph of dashboardData?.graphs;let i=index;\">\n                    <!-- <div class=\"page-break\" *ngIf=\"i % 5 == 0 && i != 0\"></div> -->\n                    \n                    <ng-container *ngIf=\"graph.graphType != 3 && graph.graphType != 2\">\n                        <div class=\"dashboard-graph\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"min-height: 370px; padding: 0px;\"> <!-- loader start -->\n                            <h3 *ngIf=\"graph.graph_structure.xAxis[0] != '***LABEL***'\" style=\"text-align: center; background-color: #eee; padding: 2px;\">{{graph.graphname}}</h3>\n                            <div [id]=\"'graph-'+ graph.graph_id\" style=\"position: relative; padding: 10px; padding-top: 45px;\">\n                                <div class=\"lds-ellipsis\">\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                </div> <!-- loader end -->\n                            </div>\n                        </div>\n                    </ng-container>\n                    <div *ngIf=\"graph.graphType==2\" class=\"dashboard-graph\" [id]=\"'table-graph-'+ graph.graph_id\"\n                        [ngClass]=\"{'col-lg-12':\n                        graph.graph_index==1,'col-lg-6': graph.graph_index==2,'col-lg-4':\n                        graph.graph_index==3,'col-lg-3': graph.graph_index==4}\" style=\"display: flex;\n                        flex-direction: column; border-bottom: 0px; background-color:antiquewhite;\">\n                        <!-- loader start -->\n                        <h2 style=\"text-align: center; margin-bottom: 0px;\">\n                            {{graph.graphname}}</h2> <!-- loader end -->\n                    </div>\n                    <div *ngIf=\"graph.graphType==3\" class=\"dashboard-graph\" [id]=\"'table-graph-'+\n                        graph.graph_id\" [ngClass]=\"{'col-lg-12': graph.graph_index==1,'col-lg-6':\n                        graph.graph_index==2,'col-lg-4': graph.graph_index==3,'col-lg-3': graph.graph_index==4}\"\n                        style=\"min-height: 300px; display: flex; flex-direction: column; padding-bottom: 2%;\">\n                        <!-- loader start -->\n                        <h3 style=\"text-align: center;\">{{graph.graphname}}</h3>\n                        <ng-container *ngIf=\"tableDatas.hasOwnProperty('table-graph-' + graph.graph_id)\">\n                            <dx-pivot-grid [allowSortingBySummary]=\"true\" [allowSorting]=\"true\" [allowFiltering]=\"true\"\n                                [showBorders]=\"true\" [dataSource]=\"tableDatas['table-graph-' + graph.graph_id]\">\n                                <dxo-field-chooser [enabled]=\"false\"></dxo-field-chooser> </dx-pivot-grid>\n                        </ng-container> <ng-container *ngIf=\"tableDatas['table-graph-' +\n                            graph.graph_id]==undefined\">\n                            <div class=\"lds-ellipsis\">\n                                <div></div>\n                                <div>\n                                </div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                        </ng-container>\n                        <!-- loader end -->\n                    </div>\n                </ng-container> </div>\n        </div>\n    </div>\n</div>", styles: [".left-sidebar .nav-link{text-transform:capitalize}.left-sidebar i{margin-right:10px}.left-sidebar .nav-tabs .nav-item{text-transform:capitalize}::ng-deep .left-sidebar .nav-item{text-transform:capitalize}::ng-deep .modal{z-index:1060}.filter-container{padding:10px;background:whitesmoke;border:2px solid #ccc}.filter-container h3{margin-bottom:auto}.filter-container .col-lg-3{padding-left:0}.search-filter{height:23px}.search-group{display:flex;align-items:center;justify-content:space-between}.search-group .filter-icon{margin:0}.dash_graph_sec .dash_graph{background-color:#fff}.dash_graph_sec .dash_graph .graph_name{text-align:center;background-color:#000;color:#fff;padding:5px;margin-bottom:0}.dash_graph_sec .dash_graph .graph_design{margin:0}.dashboard-graph{border:1px solid #e4e4e4;border-top:0px;align-items:center;justify-content:center}.modal{z-index:1060!important}::ng-deep .dropdown-custom{inset:103% 0 auto auto!important}.dashname{border-style:groove;background-color:#eee;width:64px;height:34px;display:flex;justify-content:center;align-items:center}.beans-list{padding-left:0;display:flex;flex-wrap:wrap}.beans{border-style:groove;background-color:#fd8309;color:#fff;border-radius:10px;padding:1%;border-color:#fd8309}.captcha-box{display:flex;justify-content:center;align-items:center;height:100%;position:absolute;width:100%;padding:5%;background:#ccc}.dashboard-wrapper{box-shadow:1px 1px 10px #ddd;border-radius:5px}.main_container{background-size:cover;background-repeat:no-repeat}@media print{.page-break{page-break-after:always!important}#dashboardScreen{display:block}}@media print{::ng-deep body,::ng-deep html,::ng-deep #wrapper{width:100%!important}::ng-deep .highcharts-root{width:100%!important}}\n"], components: [{ type: i5.MultiSelectComponent, selector: "ng-multiselect-dropdown", inputs: ["disabled", "placeholder", "settings", "data"], outputs: ["onFilterChange", "onDropDownClose", "onSelect", "onDeSelect", "onSelectAll", "onDeSelectAll"] }, { type: i6.DxPivotGridComponent, selector: "dx-pivot-grid", inputs: ["allowExpandAll", "allowFiltering", "allowSorting", "allowSortingBySummary", "dataFieldArea", "dataSource", "disabled", "elementAttr", "encodeHtml", "export", "fieldChooser", "fieldPanel", "headerFilter", "height", "hideEmptySummaryCells", "hint", "loadPanel", "rowHeaderLayout", "rtlEnabled", "scrolling", "showBorders", "showColumnGrandTotals", "showColumnTotals", "showRowGrandTotals", "showRowTotals", "showTotalsPrior", "stateStoring", "tabIndex", "texts", "visible", "width", "wordWrapEnabled"], outputs: ["onCellClick", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDisposing", "onExporting", "onInitialized", "onOptionChanged", "allowExpandAllChange", "allowFilteringChange", "allowSortingChange", "allowSortingBySummaryChange", "dataFieldAreaChange", "dataSourceChange", "disabledChange", "elementAttrChange", "encodeHtmlChange", "exportChange", "fieldChooserChange", "fieldPanelChange", "headerFilterChange", "heightChange", "hideEmptySummaryCellsChange", "hintChange", "loadPanelChange", "rowHeaderLayoutChange", "rtlEnabledChange", "scrollingChange", "showBordersChange", "showColumnGrandTotalsChange", "showColumnTotalsChange", "showRowGrandTotalsChange", "showRowTotalsChange", "showTotalsPriorChange", "stateStoringChange", "tabIndexChange", "textsChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { type: i7.DxoFieldChooserComponent, selector: "dxo-field-chooser", inputs: ["allowSearch", "applyChangesMode", "enabled", "height", "layout", "searchTimeout", "texts", "title", "width"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: XSightsBackendPublicDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-x-sights-backend-public-dashboard', template: "<div *ngIf=\"dashboardData != {}\">\n    <div class=\"dash_graph_sec\">\n        <div class=\"dash_graph dashboard-wrapper\">\n            <div>\n                <h3 class=\"graph_name\" style=\"height: 44px;\">{{dashboardData.dashboard_name}} </h3>\n            </div>\n            <div class=\"filter-container\" *ngIf=\"filters.length\">\n                <h3>Filters:</h3>\n                <div class=\"col-lg-12 row\">\n                    <div class=\"col-lg-3\" *ngFor=\"let filter of filters;let i = index\"> \n                        <ng-multiselect-dropdown\n                            [placeholder]=\"'Select ' + filter.fieldName + '...'\" [(ngModel)]=\"filter.selValues\"\n                            [settings]=\"dropdownSettings\" [data]=\"filter.values\"> \n                        </ng-multiselect-dropdown> \n                    </div>\n                </div>\n                <div class=\"col-lg-12\">\n                    <button class=\"btn btn-primary\" (click)=\"getGraphDashBoardById()\">Apply Filter</button>\n                </div>\n            </div>\n            <div class=\"row graph_design\" id=\"dashboardScreen\"> \n                <ng-container *ngFor=\"let graph of dashboardData?.graphs;let i=index;\">\n                    <!-- <div class=\"page-break\" *ngIf=\"i % 5 == 0 && i != 0\"></div> -->\n                    \n                    <ng-container *ngIf=\"graph.graphType != 3 && graph.graphType != 2\">\n                        <div class=\"dashboard-graph\"\n                            [ngClass]=\"{'col-lg-12': graph.graph_index == 1,'col-lg-6': graph.graph_index == 2,'col-lg-4': graph.graph_index == 3,'col-lg-3': graph.graph_index == 4}\"\n                            style=\"min-height: 370px; padding: 0px;\"> <!-- loader start -->\n                            <h3 *ngIf=\"graph.graph_structure.xAxis[0] != '***LABEL***'\" style=\"text-align: center; background-color: #eee; padding: 2px;\">{{graph.graphname}}</h3>\n                            <div [id]=\"'graph-'+ graph.graph_id\" style=\"position: relative; padding: 10px; padding-top: 45px;\">\n                                <div class=\"lds-ellipsis\">\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                    <div></div>\n                                </div> <!-- loader end -->\n                            </div>\n                        </div>\n                    </ng-container>\n                    <div *ngIf=\"graph.graphType==2\" class=\"dashboard-graph\" [id]=\"'table-graph-'+ graph.graph_id\"\n                        [ngClass]=\"{'col-lg-12':\n                        graph.graph_index==1,'col-lg-6': graph.graph_index==2,'col-lg-4':\n                        graph.graph_index==3,'col-lg-3': graph.graph_index==4}\" style=\"display: flex;\n                        flex-direction: column; border-bottom: 0px; background-color:antiquewhite;\">\n                        <!-- loader start -->\n                        <h2 style=\"text-align: center; margin-bottom: 0px;\">\n                            {{graph.graphname}}</h2> <!-- loader end -->\n                    </div>\n                    <div *ngIf=\"graph.graphType==3\" class=\"dashboard-graph\" [id]=\"'table-graph-'+\n                        graph.graph_id\" [ngClass]=\"{'col-lg-12': graph.graph_index==1,'col-lg-6':\n                        graph.graph_index==2,'col-lg-4': graph.graph_index==3,'col-lg-3': graph.graph_index==4}\"\n                        style=\"min-height: 300px; display: flex; flex-direction: column; padding-bottom: 2%;\">\n                        <!-- loader start -->\n                        <h3 style=\"text-align: center;\">{{graph.graphname}}</h3>\n                        <ng-container *ngIf=\"tableDatas.hasOwnProperty('table-graph-' + graph.graph_id)\">\n                            <dx-pivot-grid [allowSortingBySummary]=\"true\" [allowSorting]=\"true\" [allowFiltering]=\"true\"\n                                [showBorders]=\"true\" [dataSource]=\"tableDatas['table-graph-' + graph.graph_id]\">\n                                <dxo-field-chooser [enabled]=\"false\"></dxo-field-chooser> </dx-pivot-grid>\n                        </ng-container> <ng-container *ngIf=\"tableDatas['table-graph-' +\n                            graph.graph_id]==undefined\">\n                            <div class=\"lds-ellipsis\">\n                                <div></div>\n                                <div>\n                                </div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                        </ng-container>\n                        <!-- loader end -->\n                    </div>\n                </ng-container> </div>\n        </div>\n    </div>\n</div>", styles: [".left-sidebar .nav-link{text-transform:capitalize}.left-sidebar i{margin-right:10px}.left-sidebar .nav-tabs .nav-item{text-transform:capitalize}::ng-deep .left-sidebar .nav-item{text-transform:capitalize}::ng-deep .modal{z-index:1060}.filter-container{padding:10px;background:whitesmoke;border:2px solid #ccc}.filter-container h3{margin-bottom:auto}.filter-container .col-lg-3{padding-left:0}.search-filter{height:23px}.search-group{display:flex;align-items:center;justify-content:space-between}.search-group .filter-icon{margin:0}.dash_graph_sec .dash_graph{background-color:#fff}.dash_graph_sec .dash_graph .graph_name{text-align:center;background-color:#000;color:#fff;padding:5px;margin-bottom:0}.dash_graph_sec .dash_graph .graph_design{margin:0}.dashboard-graph{border:1px solid #e4e4e4;border-top:0px;align-items:center;justify-content:center}.modal{z-index:1060!important}::ng-deep .dropdown-custom{inset:103% 0 auto auto!important}.dashname{border-style:groove;background-color:#eee;width:64px;height:34px;display:flex;justify-content:center;align-items:center}.beans-list{padding-left:0;display:flex;flex-wrap:wrap}.beans{border-style:groove;background-color:#fd8309;color:#fff;border-radius:10px;padding:1%;border-color:#fd8309}.captcha-box{display:flex;justify-content:center;align-items:center;height:100%;position:absolute;width:100%;padding:5%;background:#ccc}.dashboard-wrapper{box-shadow:1px 1px 10px #ddd;border-radius:5px}.main_container{background-size:cover;background-repeat:no-repeat}@media print{.page-break{page-break-after:always!important}#dashboardScreen{display:block}}@media print{::ng-deep body,::ng-deep html,::ng-deep #wrapper{width:100%!important}::ng-deep .highcharts-root{width:100%!important}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.ToastrService }, { type: i3.XsightsBackendService }, { type: i4.XSightsCoreService }]; }, propDecorators: { dashboardUrl: [{
                type: Input
            }], adminId: [{
                type: Input
            }], dashboardLoaded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,