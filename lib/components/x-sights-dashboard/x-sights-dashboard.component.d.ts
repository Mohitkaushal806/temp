import { DatePipe } from '@angular/common';
import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { DataService } from '../../services/data.service';
import { XSightsCoreService } from '../../x-sights-core.service';
import * as i0 from "@angular/core";
export declare class XSightsDashboardComponent implements OnInit {
    private xsights;
    private toastService;
    private datePipe;
    private dataService;
    private systemApis;
    private mtrSource;
    dashboardId: number;
    adminId: any;
    showHeader: boolean;
    showFilters: boolean;
    startDate: any;
    endDate: any;
    toggleDashboard: boolean;
    isDashboardLoaded: EventEmitter<any>;
    dashboardData: any;
    fromDate: any;
    toDate: any;
    showHeaderInputs: any;
    filters: any;
    calledSource: any;
    calledSourceKeys: any;
    liveRefreshMin: any;
    dataFile: any;
    dataFileIndex: any;
    pivotTables: any;
    dashPublicUrl: any;
    dashboardInterval: any;
    dropdownSettings: any;
    constructor(xsights: XSightsCoreService, toastService: ToastrService, datePipe: DatePipe, dataService: DataService);
    ngOnInit(): void;
    renderPage(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    refreshSystemApis(): Promise<void>;
    getDashBoardById(): void;
    generateDashboard(graph: any, reCall?: boolean): Promise<unknown>;
    buildChart(widgetData: any, data: any, tempData: any): Promise<unknown>;
    filterData(data: any, sourceId: any): any;
    checkDashboardLoading(): void;
    setGraphOrder(a: any, b: any): 1 | -1 | 0;
    filteredDashboard(): Promise<void>;
    createJSONFileOfData(data: any): File;
    static ɵfac: i0.ɵɵFactoryDeclaration<XSightsDashboardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XSightsDashboardComponent, "x-sights-dashboard", never, { "dashboardId": "dashboardId"; "adminId": "adminId"; "showHeader": "showHeader"; "showFilters": "showFilters"; "startDate": "startDate"; "endDate": "endDate"; "toggleDashboard": "toggleDashboard"; }, { "isDashboardLoaded": "isDashboardLoaded"; }, never, never>;
}
