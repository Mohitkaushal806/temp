import { DatePipe } from '@angular/common';
import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { DataService } from '../../services/data.service';
import { XSightsCoreService } from '../../x-sights-core.service';
import { XsightsBackendService } from '../../services/xsights-backend.service';
import * as i0 from "@angular/core";
export declare class XSightsBackendDashboardComponent implements OnInit {
    private xsightsBackend;
    private xsights;
    private toastService;
    private datePipe;
    private dataService;
    private systemApis;
    private mtrSource;
    dashboardId: number;
    adminId: any;
    showHeader: boolean;
    showFilters: boolean;
    startDate: any;
    endDate: any;
    toggleDashboard: boolean;
    isDashboardLoaded: EventEmitter<any>;
    showLoading: EventEmitter<Boolean>;
    dashboardData: any;
    fromDate: any;
    toDate: any;
    showHeaderInputs: any;
    filters: any;
    selFilters: any;
    liveRefreshMin: any;
    seriesData: any;
    pivotTables: any;
    dashPublicUrl: any;
    dashboardInterval: any;
    dropdownSettings: any;
    tableGraphs: any;
    calledSourceData: any;
    constructor(xsightsBackend: XsightsBackendService, xsights: XSightsCoreService, toastService: ToastrService, datePipe: DatePipe, dataService: DataService);
    ngOnInit(): void;
    renderPage(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getGraphDashBoardById(): void;
    isDateDifferenceGreaterThan15Days(date1: any, date2: any): boolean;
    renderTable(): Promise<void>;
    generateDashboard(graph: any, reCall?: boolean): Promise<unknown>;
    buildChart(widgetData: any, data: any, tempData: any, dashboardFilter: any): Promise<unknown>;
    loadingComplete(): void;
    setGraphOrder(a: any, b: any): 1 | -1 | 0;
    static ɵfac: i0.ɵɵFactoryDeclaration<XSightsBackendDashboardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XSightsBackendDashboardComponent, "lib-x-sights-backend-dashboard", never, { "dashboardId": "dashboardId"; "adminId": "adminId"; "showHeader": "showHeader"; "showFilters": "showFilters"; "startDate": "startDate"; "endDate": "endDate"; "toggleDashboard": "toggleDashboard"; }, { "isDashboardLoaded": "isDashboardLoaded"; "showLoading": "showLoading"; }, never, never>;
}
